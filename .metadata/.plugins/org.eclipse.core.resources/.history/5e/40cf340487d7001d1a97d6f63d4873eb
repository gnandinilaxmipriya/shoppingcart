package com.shopcart.backend.controller;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.shopcart.backend.model.Address;
import com.shopcart.backend.model.Users;
import com.shopcart.backend.repository.UsersRepository;

@RestController	
@CrossOrigin("http://localhost:3000")
public class UsersController {
	
	@Autowired
	private UsersRepository usersRepository;
	
	@PostMapping("/add")
	Users newUsers(@RequestBody Users users)
	{
		return usersRepository.save(users);
	}
	
	@GetMapping("/show")
	List<Users> getAllUsers(){
		return usersRepository.findAll();
	}
	
	@GetMapping("/validate/{email}/{password}")
	String validateUser(@PathVariable Map<String,String> map) {
		String email = map.get("email");
		String password = map.get("password");
		List<Users> user = usersRepository.findByEmailAndPassword(email,password);
		if(user.isEmpty())
		{
			return "false";
		}else {
			return "true";
		}
	}
	
	@GetMapping("/active/{email}")
	String getActiveUser(@PathVariable Map<String,String> map)
	{
		String email = map.get("email");
		List<Users> user = usersRepository.findByEmail(email);
		if(user.isEmpty())
		{
			
			return "false";
		}else {
			//already a user 
			return "true";
		}
	}
	
	@GetMapping("/viewprofile/{email}")
	List<Users> getProfile(@PathVariable("email") String email){
		return usersRepository.findByEmail(email);
	}

	@PutMapping("/updateprofile/{id}")
	Users updateProfile(@PathVariable("id")Long id , @RequestBody Users users)
	{
		Users existingUsers = usersRepository.findById(id).get();
		if(users.getUname()!=null) {
			existingUsers.setUname(users.getUname());
		}
		if(users.getEmail()!=null) {
			existingUsers.setEmail(users.getEmail());
		}
		
		if(users.getPhone()!=null)
		{
		existingUsers.setPhone(users.getPhone());
		}
//		Address addressb = existingUsers.getAddress();
//		Address addressf = users.getAddress();
//		if(addressb==null && addressf!=null) {
//			
//			addressf.setStreet(addressf.getStreet());
//			addressf.setCity(addressf.getCity());
//			addressf.setState(addressf.getState());
//			addressf.setPincode(addressf.getPincode());
//			existingUsers.setAddress(addressf);
//		}
//		else if(addressb!=null && addressf!=null) {
////			Long aid= addressb.getId();
//			
//			if(addressf.getStreet()!=null)
//			{
//				addressb.setStreet(addressf.getStreet());
//			}
//			if(addressf.getCity()!=null)
//			{
//				addressb.setCity(addressf.getCity());
//			}
//			if(addressf.getState()!=null)
//			{
//				addressb.setState(addressf.getState());
//			}
//			if(addressf.getPincode()!=null) {
//				addressb.setPincode(addressf.getPincode());
//			}
//			existingUsers.setAddress(addressb);
//		}
//		else if(addressf==null)
//		{
//			addressb.setStreet(addressb.getStreet());
//			addressb.setCity(addressb.getCity());
//			addressb.setState(addressb.getState());
//			addressb.setPincode(addressb.getPincode());
//			existingUsers.setAddress(addressb);
//		}
		return usersRepository.save(existingUsers);
		
	}
}
