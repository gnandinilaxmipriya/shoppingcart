package com.shopcart.backend.Products;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.shopcart.backend.repository.ProductsRepository;
import com.shopcart.backend.service.ProductsService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.shopcart.backend.model.*;
import static java.util.Arrays.asList;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.List;
import java.util.Optional;
@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
public class ProductsTest {
	
	@MockBean
	ProductsRepository productsRepository; 
	
	@InjectMocks
	ProductsService productsService;

	@Test
	public void getProductById() {
		
		Products product = new Products();
		int id= 1;
		product.setProductId((long) 1);
		Mockito.when(productsRepository.findById((long) id)).thenReturn(Optional.of(product));
		Optional<Products> product2 = productsService.getProductById((long) id);
		assertNotNull(product2);
		
	}
	
	@Test
	public void getAll() {
		Products product = new Products();
		int id= 1;
		product.setProductId((long) id);
		Mockito.when(productsRepository.findAll()).thenReturn(asList(product));
		List<Products> product2 = productsService.getAll();
		assertNotNull(product2);
	}
	
	@Test
	public void getAllByCategory() {
		Products product = new Products();
		int id= 1;
		product.setProductId((long) id);
		product.setCategory("Device");
		Mockito.when(productsRepository.findAllByCategory("Device")).thenReturn(asList(product));
		List<Products> product2 = productsService.getAllByCategory("Device");
		assertNotNull(product2);
	}
	@Test
	public void getAllByFiltername() {
		Products product = new Products();
		int id= 1;
		product.setProductId((long) id);
		product.setName("Nokia");
		product.setCategory("Device");
		Mockito.when(productsRepository.findAllByFilterName("Device", "Nokia")).thenReturn(asList(product));
		ArrayNode arrayNode = new ObjectMapper().createArrayNode();
		arrayNode.add("Nokia");
		ObjectNode objectNode = new ObjectNode(null);
		objectNode.set("name", arrayNode);
		List<Products> product2 = productsService.getAllByFiltername("Device", objectNode);
		assertNotNull(product2);
	}
	@Test
	public void getAllByFilterprice() {
		Products product = new Products();
		int id= 1;
		product.setProductId((long) id);
		product.setName("Nokia");
		product.setCategory("Device");
		product.setPrice("1000");
		Mockito.when(productsRepository.findAllByFilterPrice("Device", "1000")).thenReturn(asList(product));
		ArrayNode arrayNode = new ObjectMapper().createArrayNode();
		arrayNode.add("1000");
		ObjectNode objectNode = new ObjectNode(null);
		objectNode.set("price", arrayNode);
		List<Products> product2 = productsService.getAllByFilterprice("Device", objectNode);
		assertNotNull(product2);
	}
	
	@Test
	public void getAllByFilter()
	{
		Products product = new Products();
		int id= 1;
		product.setProductId((long) id);
		product.setName("Nokia");
		product.setCategory("Device");
		product.setPrice("1000");
		Mockito.when(productsRepository.findAllByFilter("Device", "Nokia", "1000")).thenReturn(asList(product));
		ArrayNode arrayNode = new ObjectMapper().createArrayNode();
		arrayNode.add("Nokia");
		arrayNode.add("1000");
		ObjectNode objectNode = new ObjectNode(null);
		objectNode.set("name", arrayNode);
		objectNode.set("price", arrayNode);
		List<Products> product2 = productsService.getAllByFilter("Device", objectNode);
		assertNotNull(product2);

	}
	
	@Test 
	public void getAllByKeyword() {
		Products product = new Products();
		int id= 1;
		product.setProductId((long) id);
		product.setName("Nokia");
		product.setCategory("Device");
		product.setPrice("1000");
		product.setDetails("good");
		Mockito.when(productsRepository.findAll("good")).thenReturn(asList(product));
		List<Products> product2 = productsService.getAllByKeyword("good");
		assertNotNull(product2)
	}
}
